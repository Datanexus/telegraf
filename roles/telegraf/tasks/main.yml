# (c) 2016 DataNexus Inc.  All Rights Reserved.
# Licensed software not for distribution
#
#
---
- block:
  
    - name: TELEGRAF OVERLAY | configuring agent precision
      lineinfile:
        path: "{{ telegraf.config_file }}"
        regexp: '^  precision ='
        line: "  precision = \"{{ telegraf.input_filters.agent.config.precision }}\""
      notify: restart telegraf
    
    - name: TELEGRAF OVERLAY | configuring telegraf logs
      lineinfile:
        path: "{{ telegraf.config_file }}"
        regexp: '^  logfile = '
        line: "  logfile = \"{{ telegraf.config.logs }}\""
      notify: restart telegraf

    - name: TELEGRAF OVERLAY | ensuring log file exists and is readable
      file:
        path: "{{ telegraf.config.logs }}"
        state: touch
        mode: 0644
        owner: "{{ telegraf.user }}"
        group: "{{ telegraf.group }}"
        
    - name: TELEGRAF OVERLAY | disabling influxdb output
      lineinfile:
        path: "{{ telegraf.config_file }}"
        regexp: '^\[\[outputs.influxdb\]\]'
        backrefs: yes
        line: '# [[outputs.influxdb]]'
      notify: restart telegraf
        
    - name: TELEGRAF OVERLAY | enabling and configuring telegraf logs
      blockinfile:
        path: "{{ telegraf.config_file }}"
        marker: "# datanexus telegraf {mark} ANSIBLE MANAGED BLOCK"
        insertafter: EOF
        state: present
        block: |
          # Stream and parse log file(s).
          [[inputs.logparser]]
            ## Log files to parse.
            ## These accept standard unix glob matching rules, but with the addition of
            ## ** as a "super asterisk". ie:
            ##   /var/log/**.log     -> recursively find all .log files in /var/log
            ##   /var/log/*/*.log    -> find all .log files with a parent dir in /var/log
            ##   /var/log/apache.log -> only tail the apache log file
            files = ["{{ telegraf.config.monitor.telegraf }}"]

            ## Read files that currently exist from the beginning. Files that are created
            ## while telegraf is running (and that match the "files" globs) will always
            ## be read from the beginning.
            from_beginning = false

            ## Method used to watch for file updates.  Can be either "inotify" or "poll".
            watch_method = "inotify"

            ## Parse logstash-style "grok" patterns:
            [inputs.logparser.grok]
              ## This is a list of patterns to check the given log file(s) for.
              ## Note that adding patterns here increases processing time. The most
              ## efficient configuration is to have one pattern per logparser.
              ## Other common built-in patterns are:
              ##   %{COMMON_LOG_FORMAT}   (plain apache & nginx access logs)
              ##   %{COMBINED_LOG_FORMAT} (access logs + referrer & agent)
              # patterns = ["%{COMBINED_LOG_FORMAT}"]
              patterns = ['{{ telegraf.config.pattern.telegraf }}']

              ## Name of the outputted measurement name.
              measurement = "log"

              ## Full path(s) to custom pattern files.
              # custom_pattern_files = []

              ## Custom patterns can also be defined here. Put one pattern per line.
              # custom_patterns = '''
              # '''
              custom_patterns = '''
          {{ telegraf.config.custom_pattern }}
          '''
              ## Timezone allows you to provide an override for timestamps that
              ## don't already include an offset
              ## e.g. 04/06/2016 12:41:45 data one two 5.43µs
              ##
              ## Default: "" which renders UTC
              ## Options are as follows:
              ##   1. Local             -- interpret based on machine localtime
              ##   2. "Canada/Eastern"  -- Unix TZ values like those found in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
              ##   3. UTC               -- or blank/unspecified, will return timestamp in UTC
              # timezone = "Canada/Eastern"
      notify: restart telegraf

    - name: TELEGRAF OVERLAY | ensuring syslog log file is readable
      file:
        path: "{{ telegraf.config.monitor.syslog }}"
        state: touch
        mode: 0644
        
    - name: TELEGRAF OVERLAY | enabling and configuring syslog
      blockinfile:
        path: "{{ telegraf.config_file }}"
        marker: "# datanexus syslog {mark} ANSIBLE MANAGED BLOCK"
        insertafter: EOF
        state: present
        block: |
          # Stream and parse log file(s).
          [[inputs.logparser]]
            ## Log files to parse.
            ## These accept standard unix glob matching rules, but with the addition of
            ## ** as a "super asterisk". ie:
            ##   /var/log/**.log     -> recursively find all .log files in /var/log
            ##   /var/log/*/*.log    -> find all .log files with a parent dir in /var/log
            ##   /var/log/apache.log -> only tail the apache log file
            files = ["{{ telegraf.config.monitor.syslog }}"]

            ## Read files that currently exist from the beginning. Files that are created
            ## while telegraf is running (and that match the "files" globs) will always
            ## be read from the beginning.
            from_beginning = false

            ## Method used to watch for file updates.  Can be either "inotify" or "poll".
            watch_method = "inotify"

            ## Parse logstash-style "grok" patterns:
            [inputs.logparser.grok]
              ## This is a list of patterns to check the given log file(s) for.
              ## Note that adding patterns here increases processing time. The most
              ## efficient configuration is to have one pattern per logparser.
              ## Other common built-in patterns are:
              ##   %{COMMON_LOG_FORMAT}   (plain apache & nginx access logs)
              ##   %{COMBINED_LOG_FORMAT} (access logs + referrer & agent)
              # patterns = ["%{COMBINED_LOG_FORMAT}"]
              patterns = ['{{ telegraf.config.pattern.syslog }}']

              ## Name of the outputted measurement name.
              measurement = "log"

              ## Full path(s) to custom pattern files.
              # custom_pattern_files = []

              ## Custom patterns can also be defined here. Put one pattern per line.
              # custom_patterns = '''
              # '''

              ## Timezone allows you to provide an override for timestamps that
              ## don't already include an offset
              ## e.g. 04/06/2016 12:41:45 data one two 5.43µs
              ##
              ## Default: "" which renders UTC
              ## Options are as follows:
              ##   1. Local             -- interpret based on machine localtime
              ##   2. "Canada/Eastern"  -- Unix TZ values like those found in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
              ##   3. UTC               -- or blank/unspecified, will return timestamp in UTC
              # timezone = "Canada/Eastern"
      notify: restart telegraf
    
    - name: TELEGRAF OVERLAY | ensuring broker log file is readable
      file:
        path: /var/log/kafka
        state: directory
        mode: 0755
      when: application == 'kafka_broker'
      
    - name: TELEGRAF OVERLAY | ensuring broker log file is readable
      file:
        path: "{{ telegraf.config.monitor.broker }}"
        mode: 0644
      when: application == 'kafka_broker'
      
    - name: TELEGRAF OVERLAY | enabling and configuring broker logs
      blockinfile:
        path: "{{ telegraf.config_file }}"
        marker: "# datanexus broker log {mark} ANSIBLE MANAGED BLOCK"
        insertafter: EOF
        state: present
        block: |
          # Stream and parse log file(s).
          [[inputs.logparser]]
            ## Log files to parse.
            ## These accept standard unix glob matching rules, but with the addition of
            ## ** as a "super asterisk". ie:
            ##   /var/log/**.log     -> recursively find all .log files in /var/log
            ##   /var/log/*/*.log    -> find all .log files with a parent dir in /var/log
            ##   /var/log/apache.log -> only tail the apache log file
            files = ["{{ telegraf.config.monitor.broker }}"]

            ## Read files that currently exist from the beginning. Files that are created
            ## while telegraf is running (and that match the "files" globs) will always
            ## be read from the beginning.
            from_beginning = false

            ## Method used to watch for file updates.  Can be either "inotify" or "poll".
            watch_method = "inotify"

            ## Parse logstash-style "grok" patterns:
            [inputs.logparser.grok]
              ## This is a list of patterns to check the given log file(s) for.
              ## Note that adding patterns here increases processing time. The most
              ## efficient configuration is to have one pattern per logparser.
              ## Other common built-in patterns are:
              ##   %{COMMON_LOG_FORMAT}   (plain apache & nginx access logs)
              ##   %{COMBINED_LOG_FORMAT} (access logs + referrer & agent)
              # patterns = ["%{COMBINED_LOG_FORMAT}"]
              patterns = ['{{ telegraf.config.pattern.broker }}']

              ## Name of the outputted measurement name.
              measurement = "log"

              ## Full path(s) to custom pattern files.
              # custom_pattern_files = []

              ## Custom patterns can also be defined here. Put one pattern per line.
              # custom_patterns = '''
              # '''

              ## Timezone allows you to provide an override for timestamps that
              ## don't already include an offset
              ## e.g. 04/06/2016 12:41:45 data one two 5.43µs
              ##
              ## Default: "" which renders UTC
              ## Options are as follows:
              ##   1. Local             -- interpret based on machine localtime
              ##   2. "Canada/Eastern"  -- Unix TZ values like those found in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
              ##   3. UTC               -- or blank/unspecified, will return timestamp in UTC
              # timezone = "Canada/Eastern"
      notify: restart telegraf
      when: application == 'kafka_broker'
      
    - name: TELEGRAF OVERLAY | configuring outputs
      include_tasks: "{{ item}}.yml"
      with_items: "{{ output_filters | default(telegraf.output_filters) }}"
      
  become: yes

- block:
  
  - name: TELEGRAF OVERLAY | fixing telegraf kill signal in sysvinit for {{ ansible_distribution }}
    lineinfile:
      path: /etc/init.d/telegraf
      regexp: '    kill \-s \$3 \$pid'
      line: '    kill -9 $pid'
  
  become: yes 
  when:
    - ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
    - ansible_distribution_version is version_compare('7', '<')
  
- block:

  - name: TELEGRAF OVERLAY | starting {{ telegraf.service_name }} by systemd
    systemd:
      name: "{{ telegraf.service_name }}"
      enabled: yes
    when: ansible_distribution_version is version_compare('7', '>=')

  - name: TELEGRAF OVERLAY | starting {{ telegraf.service_name }} by sysvinit
    sysvinit:
      name: "{{ telegraf.service_name }}"
      enabled: yes
    when: ansible_distribution_version is version_compare('7', '<')

  become: yes
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
